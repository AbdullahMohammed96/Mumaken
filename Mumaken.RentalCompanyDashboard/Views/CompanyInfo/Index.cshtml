@model Mumaken.Domain.DTO.AuthDTO.ProviderInfoDto
@{
    Layout = "_Layout";
}

<ul class="nav nav-pills mb-4" id="pills-tab">
    <li class="nav-item">
        <button class="nav-link active" data-bs-toggle="pill" data-bs-target="#pills-profile" type="button">
            @localizer["Profile"]
        </button>
    </li>
    <li class="nav-item">
        <button class="nav-link" data-bs-toggle="pill" data-bs-target="#pills-edit" type="button">
            @localizer["Edit Profile"]
        </button>
    </li>
    <li class="nav-item">
        <button class="nav-link" data-bs-toggle="pill" data-bs-target="#pills-phone" type="button">
            @localizer["Change Phone Number"]
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" data-bs-toggle="pill" data-bs-target="#pills-password" type="button">
            @localizer["Change Password"]
        </button>
    </li>
</ul>

<div class="row">
    <div class="col-lg-6">
        <div class="tab-content" id="pills-tabContent">
            <!-- Profile -->
            <div class="tab-pane fade show active" id="pills-profile">
                <div>
                    <div class="mb-4">
                        <div class="profile-img not_af">
                            <img src="@Model.imgProfile" alt="" class="img">
                        </div>
                    </div>

                    <div class="input-g">
                        <lablel class="main-label">@localizer["Name"] <span class="hint">*</span></lablel>
                        <div class="main-input">
                            <input type="text" class="input-me disabled" placeholder="@Model.userName">
                        </div>
                    </div>

                    <div class="input-g">
                        <lablel class="main-label">@localizer["Mobile Number"] <span class="hint">*</span></lablel>
                        <div class="main-input">
                            <input type="text" class="input-me disabled" placeholder="@Model.phone">
                        </div>
                    </div>

                    <div class="input-g">
                        <lablel class="main-label">@localizer["City"] <span class="hint">*</span></lablel>
                        <div class="main-input">
                            <input type="text" class="input-me disabled" placeholder="@Model.city">
                        </div>
                    </div>

                    <div class="input-g">
                        <lablel class="main-label">@localizer["District"] <span class="hint">*</span></lablel>
                        <div class="main-input">
                            <input type="text" class="input-me disabled" placeholder="@Model.distractName">
                        </div>
                    </div>

                    <div class="input-g">
                        <lablel class="main-label">@localizer["Geographic Location"] <span class="hint">*</span></lablel>
                        <div class="main-input">
                            <input type="text" class="input-me disabled" placeholder="@Model.location">
                        </div>
                    </div>

                    <div class="input-g">
                        <lablel class="main-label">@localizer["Commercial Register Number"] <span class="hint">*</span></lablel>
                        <div class="main-input">
                            <input type="text" class="input-me disabled" placeholder="@Model.commercialRegisterNumber">
                        </div>
                    </div>
                </div>
            </div>

            <!-- Edit Profile -->
            <div class="tab-pane fade" id="pills-edit">
                <form asp-action="UpdateProfileInfo" asp-controller="CompanyInfo" method="post" id="editProfileForm" enctype="multipart/form-data">
                    <input type="hidden" asp-for="id" />
                    <div class="mb-4">
                        <label for="imageProfile" class="profile-img">
                            <i class="fa-solid fa-arrow-up-from-bracket"></i>
                            <input type="file" id="imageProfile" name="imageProfile" accept="image/*" class="hidden-input img-upload-input profile">
                            <img src="@Model.imgProfile" alt="" class="img">
                        </label>
                    </div>

                    <div class="input-g">
                        <lablel class="main-label">@localizer["Name"] <span class="hint">*</span></lablel>
                        <div class="main-input">
                            <input type="text" class="input-me" name="userName" id="userName" value="@Model.userName">
                            <span asp-validation-for="userName" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="input-g">
                        <lablel class="main-label">@localizer["City"] <span class="hint">*</span></lablel>
                        <div class="main-input">
                            <select class="select" name="cityId" id="cityId" asp-items="@(new SelectList((IEnumerable<SelectListItem>)ViewData["Cites"], "Value", "Text",Model.cityId))">
                            </select>
                            <span asp-validation-for="cityId" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="input-g">
                        <lablel class="main-label">@localizer["District"] <span class="hint">*</span></lablel>
                        <div class="main-input">
                            <select class="select" name="distractId" id="distractId" asp-items="@(new SelectList((IEnumerable<SelectListItem>)ViewData["Regions"], "Value", "Text"))">
                            </select>
                            <span asp-validation-for="distractId" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="input-g">
                        <lablel class="main-label">@localizer["Geographic Location"] <span class="hint">*</span></lablel>

                        <div class="main-input">
                        <input type="text" data-bs-toggle="modal" data-bs-target="#mapModal" class="input-me" name="address" readonly id="address"
                               placeholder='@localizer["Please specify the address on the map."]' />
                   
                        </div>
                    </div>

                    <!-- Hidden fields to store Lat/Lng -->
                    <input value="@Model.lat" type="hidden" id="Lat" name="Lat" />
                    <input value="@Model.lng" type="hidden" id="Lng" name="Lng" />
@* 
                    <div class="input-g">
                        <lablel class="main-label">@localizer["Geographic Location"] <span class="hint">*</span></lablel>
                        <div class="main-input">
                            <input type="text" name="location" id="location" data-bs-target="#mapModal" data-bs-toggle="modal" class="input-me" id="inputMap" placeholder="@localizer["Enter Geographic Location"]">
                            <input type="hidden" name="Lat" id="Lat" />
                            <input type="hidden" name="Lng" id="Lng" />
                            <i class="fa-solid fa-location-dot main-icon"></i>
                        </div>
                    </div>
 *@
                    <div class="input-g">
                        <lablel class="main-label">@localizer["Commercial Register Number"] <span class="hint">*</span></lablel>
                        <div class="main-input">
                            <input type="text" class="input-me" value="@Model.commercialRegisterNumber" name="commercialRegisterNumber" id="commercialRegisterNumber">
                            <span asp-validation-for="commercialRegisterNumber" class="text-danger"></span>
                        </div>
                    </div>
                    <button type="button" onclick="editProfile()" class="main-btn md up">@localizer["Save"]</button>
                    <button type="submit" class="main-btn md up" hidden>@localizer["Save"]</button>
                </form>
            </div>

            <!-- Edit Phone -->
            <div class="tab-pane fade" id="pills-phone">
                <form action="">
                    <div class="input-g">
                        <lablel class="main-label">@localizer["Current Password"] <span class="hint">*</span></lablel>
                        <div class="main-input">
                            <input type="password" class="input-me" id="currentPassword" placeholder="@localizer["Enter Current Password"]">
                        </div>
                    </div>

                    <div class="input-g">
                        <lablel class="main-label">@localizer["New Phone Number"] <span class="hint">*</span></lablel>
                        <div class="main-input">
                            <input type="number" class="input-me telephone" id="newPhoneNumber" placeholder="@localizer["Enter New Phone Number"]">
                        </div>
                    </div>

                    <button type="button" onclick="ChangePhoneNumber()" class="main-btn md up">@localizer["Send"]</button>
                </form>
            </div>

            <!-- Edit Password -->
            <div class="tab-pane fade" id="pills-password">
                <form action="">
                    <div class="input-g">
                        <lablel class="main-label">@localizer["Current Password"] <span class="hint">*</span></lablel>
                        <div class="main-input">
                            <input type="password" id="editPasswordCurrentPassword" class="input-me" placeholder="@localizer["Enter Current Password"]">
                        </div>
                    </div>

                    <div class="input-g">
                        <lablel class="main-label">@localizer["New Password"] <span class="hint">*</span></lablel>
                        <div class="main-input">
                            <input type="password" id="editPasswordNewPassword" class="input-me" placeholder="@localizer["Enter New Password"]">
                        </div>
                    </div>

                    <div class="input-g">
                        <lablel class="main-label">@localizer["Confirm New Password"] <span class="hint">*</span></lablel>
                        <div class="main-input">
                            <input type="password" id="editPasswordConfirmNewPassword" class="input-me" placeholder="@localizer["Confirm New Password"]">
                        </div>
                    </div>

                    <button type="submit" class="main-btn md up" hidden>@localizer["Confirm"]</button>
                    <button type="button" class="main-btn md up" onclick="changePassword()">@localizer["Confirm"]</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section rendalModal {
    <!-- start map modal -->
    <div class="modal fade" id="mapModal" aria-hidden="true" aria-labelledby="exampleModalToggleLabel" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-4">
                <h3 class="fs15 mb-4 c-black">@localizer["Geographic Location"]</h3>

                <div class="container-map w-100">
                    <div class="main-input mb-3">
                        <input type="text" class="input-me" name="address2" id="address2" placeholder="@localizer["Search Here"]" />
                        <span class="current-loc"></span>
                    </div>
                    <div id="map" class="mb-3" style="width: 100%; height: 300px"></div>
                </div>

                <div class="main-btn up mt-4 w-100" data-bs-dismiss="modal">@localizer["Confirm"]</div>
            </div>
        </div>
    </div>

   
    
    
    <!-- Code Modal -->
    <div class="modal fade" id="codeModal" aria-hidden="true" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <form class="modal-content p-4" asp-action="CheckChangePhoneCode" asp-controller="DAuth">
                <div class="form-heading mb-4">
                    <h3 class="form-title">@localizer["Verification Code"]</h3>
                    <p class="form-text">@localizer["Enter the code sent to your mobile number"]</p>
                </div>
                <input type="hidden" id="newPhoneNumberSended" name="PhoneNumber" />
                <input type="hidden" id="newPhoneCodeSended" name="PhoneCode" />
                <input type="hidden" name="UserId" value="@Model.id" />
                <!-- Code Inputs -->
                <div class="main-input">
                    @*  <input type="number" name="Code" id="changePhoneCodeText" class="input-me" style="width: 200px;" placeholder="@localizer["please Enter Code Send"]" /> *@
                    <div class="code-container mb-4 w-100">
                        <input type="number" class="code" min="0" max="9" required />
                        <input type="number" class="code" min="0" max="9" required />
                        <input type="number" class="code" min="0" max="9" required />
                        <input type="number" class="code" min="0" max="9" required />
                        <input type="hidden" class="all_code">
                    </div>
                </div>
                <br />
                <button type="submit" class="main-btn w-75 up" hidden id="btnCheckChangePhoneCode">@localizer["Confirm"]</button>
                <button type="button" onclick="CheckChangePhoneCode()" class="main-btn w-75 up">@localizer["Confirm"]</button>

                <div class="d-flex justify-content-center mt-3 align-items-center gap-1">
                    <span class="fs13 c-light2">@localizer["Didn't receive the code?"]</span>
                    <button type="button" class="c-sec bg-transparent fs13 cu-pointer" onclick="resendCode()">@localizer["Resend"]</button>
                </div>
            </form>
        </div>
    </div>
}


@section Scripts
{
    <partial name="_ValidationScriptsPartial" />

    <script type="text/javascript"
            src="https://maps.google.com/maps/api/js?&libraries=places&key=AIzaSyAB1ow9ErDvh6Wf6zODv7vMo7hoVA0ApX4">
    </script>

    <script>
        $(document).ready(function () {


            if ("geolocation" in navigator) {
                //debugger
                navigator.geolocation.getCurrentPosition(function (position) {
                    //var userLat = position.coords.latitude;
                    //var userLng = position.coords.longitude;
                    debugger
                    var userLat = "@Model.lat";
                    var userLng = "@Model.lng";

                    var latlng = new google.maps.LatLng(userLat, userLng);
                    var map = new google.maps.Map(document.getElementById('map'),
                        {
                            center: latlng,
                            zoom: 11,
                            mapTypeId: google.maps.MapTypeId.ROADMAP,
                            disableDefaultUI: true,
                            animation: google.maps.Animation.DROP,
                        });

                    var marker = new google.maps.Marker({
                        position: latlng,
                        map: map,
                        draggable: true
                    });

                    var locationPicker = $('#map').locationpicker({
                        location: {
                            latitude: "@Model.lat",
                            longitude: "@Model.lng"
                        },
                        radius: 50,
                        zoom: 15,
                        inputBinding: {
                            latitudeInput: $("#Lat"),
                            longitudeInput: $("#Lng"),
                            locationNameInput: $('#Location'),
                        },
                        enableAutocomplete: true
                    });
                    google.maps.event.addListener(marker, 'dragend', function (event) {
                        var location = locationPicker.locationpicker('location');
                        $("#Lat").val(location.latitude);
                        $("#Lng").val(location.longitude);
                    });

                    //updateLatLng(@Model.lat, @Model.lng);


                });
            }
            else {
                $("#LocationError").text("@localizer["Geolocation Not Supported"]");
            }

        });
    </script>


    <script>
        debugger
        var map, infoWindow;
        var marker;
        var lat = document.getElementById("Lat");
        var lng = document.getElementById("Lng");
        var address = document.getElementById("address");
        var address2 = document.getElementById("address2");
        console.log(lat.value)
        console.log(lng.value)
        console.log(address.value)
        console.log(address2.value)
        var geocoder = new google.maps.Geocoder();
        var infowindow = new google.maps.InfoWindow();

        setTimeout(function () {
            debugger
            if (document.querySelector(".current-loc")) {

                console.log("current location is working")

                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        (position) => {
                            const pos = {
                                // lat: position.coords.latitude,
                                // lng: position.coords.longitude,
                                lat: lat.value,
                                lng: lng.value,
                            };

                            console.log(pos)

                            infoWindow.setPosition(pos);
                            infoWindow.setContent("Location found.");
                            infoWindow.open(map);
                            map.setCenter(pos);
                            lat.value = pos.lat;
                            lng.value = pos.lng;
                            initMap();
                            console.log(marker.position.lat());
                            console.log(marker.position.lng());
                            console.log(pos.lat);
                        },
                        () => {
                            handleLocationError(true, infoWindow, map.getCenter());
                        }
                    );
                } else {
                    // Browser doesn't support Geolocation
                    handleLocationError(false, infoWindow, map.getCenter());
                    console.log("sssssssssss")
                }

            }
        }, 500)

        function initMap() {
            debugger
            var myLatlng = new google.maps.LatLng(lat.value, lng.value);
            console.log(lat.value)
            console.log(lng.value)
            var mapOptions = {
                zoom: 18,
                center: myLatlng,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
            };

            map = new google.maps.Map(document.getElementById("map"), mapOptions);
            marker = new google.maps.Marker({
                map: map,
                position: myLatlng,
                draggable: true,
            });

            // set current location
            infoWindow = new google.maps.InfoWindow();

            const locationButton = document.createElement("button");
            locationButton.setAttribute("type", "button");
            locationButton.classList.add("up", "default-font");

            locationButton.textContent = '@localizer["Current Location"]';
            locationButton.classList.add("custom-map-control-button");
            map.controls[google.maps.ControlPosition.TOP_CENTER].push(
                locationButton
            );
            //test get current location onload

            locationButton.addEventListener("click", () => {
                // Try HTML5 geolocation.

                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        (position) => {
                            debugger
                            const pos = {
                                lat: position.coords.latitude,
                                lng: position.coords.longitude,
                            };

                            infoWindow.setPosition(pos);
                            infoWindow.setContent("Location found.");
                            infoWindow.open(map);
                            map.setCenter(pos);
                            lat.value = pos.lat;
                            lng.value = pos.lng;
                            initMap();
                            console.log(marker.position.lat());
                            console.log(marker.position.lng());
                            console.log(pos.lat);
                        },
                        () => {
                            handleLocationError(true, infoWindow, map.getCenter());
                        }
                    );
                } else {
                    // Browser doesn't support Geolocation
                    handleLocationError(false, infoWindow, map.getCenter());
                }
            });


            function handleLocationError(browserHasGeolocation, infoWindow, pos) {
                debugger
                infoWindow.setPosition(pos);
                infoWindow.setContent(
                    browserHasGeolocation
                        ? '@localizer["Google maps does not have permission to use your location"]'
                        : '@localizer["Your browser doesnot support geolocation."]'
                );
                infoWindow.open(map);
            }
            // end current location code
            // if(document.querySelector('.current-loc') && !document.querySelector('.current-loc')){
            // locationButton.click()
            // }

            geocoder.geocode({ latLng: myLatlng }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    if (results[0]) {
                        debugger
                        address.value = results[0].formatted_address;
                        lat.value = marker.getPosition().lat();
                        lng.value = marker.getPosition().lng();
                        infowindow.setContent(results[0].formatted_address);
                        infowindow.open(map, marker);


                    }
                }
            });

            google.maps.event.addListener(marker, "dragend", function () {
                geocoder.geocode(
                    { latLng: marker.getPosition() },
                    function (results, status) {
                        if (status == google.maps.GeocoderStatus.OK) {
                            if (results[0]) {
                                debugger
                                address.value = results[0].formatted_address;
                                lat.value = marker.getPosition().lat();
                                lng.value = marker.getPosition().lng();
                                infowindow.setContent(results[0].formatted_address);
                                infowindow.open(map, marker);


                            }
                        }
                    }
                );
            });
        }

        function initialize() {
            //debugger
            var input = document.getElementById("address2");
            var autocomplete = new google.maps.places.Autocomplete(
                (input),
                {
                }
            );
            google.maps.event.addListener(
                autocomplete,
                "place_changed",
                function () {
                    var place = autocomplete.getPlace();
                    if (!place.geometry) {
                        return;
                    }
                    lat.value = place.geometry.location.lat();
                    lng.value = place.geometry.location.lng();
                    // initMap();
                    var address = "";
                    if (place.address_components) {
                        debugger
                        address = [
                            (place.address_components[0] &&
                                place.address_components[0].short_name) ||
                            "",
                            (place.address_components[1] &&
                                place.address_components[1].short_name) ||
                            "",
                            (place.address_components[2] &&
                                place.address_components[2].short_name) ||
                            "",
                        ].join(" ");
                    }
                    initMap();

                }
            );
        }

        google.maps.event.addDomListener(window, "load", initialize);

        google.maps.event.addDomListener(window, "load", initMap);


    </script>



    <script>
        $("#cityId").change(function () {
            var CityId = $(this).val();
            var regionList = $('#distractId');
            $.ajax({
                url: `/Home/GetRegionsByCityId?cityId=${CityId}`,
                method: 'GET',
                success: function (regions) {
                    regionList.empty();
                    $.each(regions, function (i, region) {
                        regionList.append($('<option></option>').attr('value', region.id).text(region.name));
                        if (region.id == '@ViewData["SelectDistract"]') {
                            option.prop('selected', true);
                        }

                    });
                }, error: function () { }
            })
        })
    </script>
    <script>
        function ChangePhoneNumber() {
            var currentPassword = $("#currentPassword").val()
            var newPhoneNumber = $("#newPhoneNumber").val()
            var phoneCode = $(".iti__selected-dial-code").text()
            var phoneNumberPattern = /^(5)(5|0|3|6|4|9|1|8|7)([0-9]{7})$/;
            if (!currentPassword.trim()) {
                toastr.error("@localizer["Enter Current Password"]");

            }
            else if (!phoneNumberPattern.test(newPhoneNumber)) {
                toastr.error("@localizer["Enter Valid Phone Number"]");
            }
            else if (!newPhoneNumber.trim()) {
                toastr.error("@localizer["Enter New Phone Number"]");
            }
            else {
                $.ajax({
                    url: `/DAuth/ChangePhoneNumber`,
                    method: 'post',
                    data: {
                        UserId: '@Model.id',
                        CurrentPasword: currentPassword,
                        PhoneCode: phoneCode,
                        PhoneNumber: newPhoneNumber,
                    },
                    success: function (response) {
                        debugger
                        if (response.key == 1) {
                            $("#newPhoneNumberSended").val(response.data.phoneNumber)
                            $("#newPhoneCodeSended").val(response.data.phoneCode)
                            $("#codeModal").modal("show");
                            toastr.success(response.msg);
                        } else {
                            toastr.error(response.msg);
                        }
                    },
                    error: function () {
                        console.log('An error occurred while processing the request.');
                    }
                })
            }

        }
    </script>
    <script>
        function editProfile() {
            debugger
            var address = $("#address").val(); // Get the value of the address input
            var userName = $("#userName").val();
            var commercialRegisterNumber = $("#commercialRegisterNumber").val();
            var region = $("#distractId").val();
            if (!userName.trim()) {
                toastr.error("@localizer["Please Enter The Name"]");
                return 0;
            }
            if (!commercialRegisterNumber.trim()) {
                toastr.error("@localizer["Please Enter commercial Register Number"]");
                return 0;
            }
            if (commercialRegisterNumber.length !== 10 || !/^\d{10}$/.test(commercialRegisterNumber)) {
                toastr.error("@localizer["Commercial Register Number must be exactly 10 digits"]");
                return 0;
            }
            if (!region || !region.trim() || region == 0) {
                toastr.error("@localizer["Please Enter Region"]");
                return 0;
            }
            $("#editProfileForm").submit();
        }
    </script>
    <script>
        function CheckChangePhoneCode(){
            debugger
            var codeInputs = document.querySelectorAll('.code');
            var allCodes = [];

            codeInputs.forEach(function (input) {
                var code = parseInt(input.value, 10); // Convert string to integer
                if (!isNaN(code)) { // Check if the conversion was successful
                    allCodes.push(code); // Add the integer value to the array
                }
            });

            var allCodesInt = allCodes.map(function (code) {
                return parseInt(code, 10);
            });

            if (allCodesInt.length < 4) {
                toastr.error("@localizer["Please Enter The Code"]");
                return 0;
            }
            var concatenatedInt = parseInt(allCodesInt.join(''), 10);
            var newPhoneNumber = $("#newPhoneNumberSended").val()
            var phoneCode = $(".iti__selected-dial-code").text()
            if (allCodesInt.length < 4) {
                toastr.error("@localizer["Please Enter The Code"]");
                return 0;
            }
            else{
                $.ajax({
                    url: `/DAuth/CheckChangePhoneCode`,
                    method: 'post',
                    data: {
                        UserId: '@Model.id',
                        // Code: changePhoneCodeText,
                        Code: concatenatedInt,
                        PhoneCode: phoneCode,
                        PhoneNumber: newPhoneNumber,
                    },
                    success: function (response) {
                        debugger
                        if (response.key == 1) {
                            toastr.success(response.msg);
                            setTimeout(function () {
                                window.location.reload();
                            }, 3000);
                        }
                        else {
                            toastr.error(response.msg);
                        }
                    },
                    error: function () {
                        console.log('An error occurred while processing the request.');
                    }
                })
            }
        }
        function resendCode()
        {
            $.ajax({
                url: `/CompanyInfo/ReSendCode`,
                method: 'post',
                data: {
                },
                success: function (response) {
                    if (response.key == 1) {
                        toastr.success(response.msg);
                    }
                    else {
                        toastr.error(response.msg);
                    }
                },
                error: function () {
                    console.log('An error occurred while processing the request.');
                }
            })
        }
        function changePassword()
        {
            var CurrentPassword = $("#editPasswordCurrentPassword").val();
            var NewPassword = $("#editPasswordNewPassword").val();
            var ConfirmPassword = $("#editPasswordConfirmNewPassword").val();
            if (!CurrentPassword.trim()) {
                toastr.error("@localizer["Enter Current Password"]");

            }
            else if (!NewPassword.trim()) {
                toastr.error("@localizer["Enter New Password"]");
            }
            else if (!ConfirmPassword.trim()) {
                toastr.error("@localizer["Enter Confirm Password"]");
            }
            else if (ConfirmPassword != NewPassword) {
                toastr.error("@localizer["Confirm Password Must Equal New Password"]");
            }else{
                $.ajax({
                    url: `/DAuth/ChangePassword`,
                    method: 'post',
                    data: {
                        UserId: '@Model.id',
                        CurrentPassword: CurrentPassword,
                        NewPassword: NewPassword,
                        ConfirmPassword: ConfirmPassword,
                    },
                    success: function (response) {
                        debugger
                        if (response.key == 1) {
                            toastr.success(response.msg);
                            setTimeout(function () {
                                window.location.reload();
                            }, 3000);
                        }
                        else {
                            toastr.error(response.msg);
                        }
                    },
                    error: function () {
                        console.log('An error occurred while processing the request.');
                    }
                })
            }
        }
    </script>


} 