@page
@model RegisterModel
@using Mumaken.Domain.Common.Helpers;
@{
    ViewData["Title"] = "Register";
    var lang = Helper.GetLanguage();
}

<form id="registerForm" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="auth_layout" enctype="multipart/form-data">
    <div class="container">

        <div class="row justify-content-center">
            <div class="col-xl-5 col-lg-7">

                <div class="form-heading">
                    <h3 class="form-title">@localizer["Create Account"]</h3>
                    <p class="form-text">@localizer["Register your account and join us"]</p>
                </div>

                <div class="mb-4">
                    <div class="user-photo-con">
                        <label asp-for="Input.ImageProfile" class="profile-img">
                            <i class="fa-solid fa-arrow-up-from-bracket"></i>
                            <input type="file" asp-for="Input.ImageProfile" accept="image/*"
                                   class="hidden-input img-upload-input profile">
                            <img src="" alt="" class="img">
                        </label>
                        <span asp-validation-for="Input.ImageProfile" class="text-danger"></span>
                    </div>

                </div>

                <div class="input-g">
                    <lablel class="main-label">@localizer["Name"] <span class="hint">*</span> </lablel>
                    <div class="main-input">
                        <input type="text" class="input-me" asp-for="Input.UserName" placeholder="@localizer["Enter The Name"]">
                        <span asp-validation-for="Input.UserName" class="text-danger"></span>
                    </div>
                </div>
                <input type="hidden" id="Input_PhoneCode" asp-for="Input.PhoneCode" />
                <div class="input-g">
                    <lablel class="main-label">@localizer["Phone Number"] <span class="hint">*</span> </lablel>
                    <div class="main-input">
                        <input type="number" asp-for="Input.PhoneNumber" class="input-me telephone" placeholder="@localizer["Enter Phone Number"]">
                        <span asp-validation-for="Input.PhoneNumber" class="text-danger"></span>
                    </div>
                </div>

                <div class="input-g">
                    <lablel class="main-label">@localizer["City"] <span class="hint">*</span> </lablel>
                    <div class="main-input">
                        <select asp-for="Input.CityId"
                                class="form-control"
                                asp-items="@(new SelectList((IEnumerable<SelectListItem>)ViewData["Cites"], "Value", "Text"))">
                            <option value="0" selected="selected">@localizer["Please Enter City"]</option>
                        </select>
                        <span asp-validation-for="Input.CityId" class="text-danger"></span>
                    </div>
                </div>

                <div class="input-g">
                    <lablel class="main-label">@localizer["Distract"] <span class="hint">*</span> </lablel>
                    <div class="main-input">
                        <select class="select" asp-for="Input.DistractId">
                            <option value="0" selected disabled>@localizer["Enter Distract"]</option>
                        </select>
                        <span asp-validation-for="Input.DistractId" class="text-danger"></span>
                    </div>
                </div>

                <div class="input-g">
                    <lablel class="main-label">@localizer["Location"] <span class="hint">*</span> </lablel>
                    <div class="main-input">
                        <input type="text" asp-for="Input.Location" data-bs-target="#mapModal" data-bs-toggle="modal"
                               class="input-me" placeholder="@localizer["Enter The  Location"]">
                        <input type="hidden" asp-for="Input.Lat" />
                        <input type="hidden" asp-for="Input.Lng" />

                        <i class="fa-solid fa-location-dot main-icon"></i>
                        <span asp-validation-for="Input.Location" class="text-danger"></span>
                    </div>
                </div>

                <div class="input-g">
                    <lablel class="main-label">@localizer["Commercial Registration Number"] <span class="hint">*</span> </lablel>
                    <div class="main-input">
                        <input type="text" asp-for="Input.CommercialRegisterNumber" class="input-me" placeholder="@localizer["Enter Commercial Registration Number"]">
                        <span asp-validation-for="Input.CommercialRegisterNumber" class="text-danger"></span>
                    </div>
                </div>

                <div class="input-g">
                    <lablel class="main-label">@localizer["Password"] <span class="hint">*</span> </lablel>
                    <div class="main-input">
                        <input type="password" class="input-me" asp-for="Input.Password" placeholder="@localizer["Please Enter The Password"]">
                        <span asp-validation-for="Input.Password" class="text-danger"></span>
                    </div>
                </div>

                <div class="input-g">
                    <lablel class="main-label">@localizer["Confirm Password"] <span class="hint">*</span> </lablel>
                    <div class="main-input">
                        <input type="password" class="input-me" asp-for="Input.ConfirmPassword" placeholder="@localizer["Please Enter Confirm Password"]">
                        <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
                    </div>
                </div>

                <div class="form-check mb-3">
                    <input class="form-check-input" type="checkbox" id="checkbox1">

                    <label class="form-check-label c-light2 fs13" id="checkbox1">
                        @localizer["By registering, you agree to"]
                        <a asp-action="GetConditionAndTermsForAllUser" asp-controller="Setting" class='text-decoration-underline c-sec'>
                            @localizer["Terms and Conditions"]
                        </a>
                    </label>
                    <span class="text-danger field-validation-error" data-valmsg-for="AcceptConditionAndTerms" id="AcceptConditionAndTerms" hidden data-valmsg-replace="true">
                        <span class=""> @(lang == "ar" ? "يجب الموافقه علي الشروط والاحكام" : "You must agree to the terms and conditions") </span>
                    </span>
                </div>

                <button type="submit" id="submitRegisterForm" hidden class="main-btn w-100 up">@localizer["Create Account"]</button>
                <button type="button"  onclick="RegisterNewUser()" class="main-btn w-100 up">@localizer["Create Account"]</button>

                <div class="d-flex justify-content-center mt-3 align-items-center gap-1">
                    <span class="fs13 c-light2">@localizer["do you have an account?"]</span>
                    <a asp-page="Login" asp-area="Identity" class="c-sec fs13">@localizer["Login"] </a>
                </div>

            </div>
        </div>

    </div>
</form>]



<!-- ==================================== Map Modal ==================================== -->
<div class="modal fade" id="mapModal" aria-hidden="true" aria-labelledby="exampleModalToggleLabel"
     tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content p-4">

            <h3 class="fs15 mb-4 c-black">@localizer["Location"]</h3>

            <div class="container-map w-100">
                <div class="main-input mb-3">
                    <input type="text" class="input-me" name="address2" id="address2" placeholder="@localizer["Search here"]" />
                    <span class="current-loc"></span>
                </div>
                <div id="map" class="mb-3" style="width: 100%; height: 300px"></div>
            </div>

            <div class="main-btn up mt-4 w-100" data-bs-dismiss="modal">@localizer["Confirm"]</div>

        </div>
    </div>
</div>
<!-- ==================================== End Map Modal ==================================== -->
@section Scripts
{
    <partial name="_ValidationScriptsPartial" />
   <script>
        $(document).ready(function () {
            $('#checkbox1').change(function () {
                if (!$(this).is(':checked')) {
                    $('#AcceptConditionAndTerms').removeAttr('hidden');
                } else {
                    if (!$('#AcceptConditionAndTerms').is('[hidden]')) {
                        $('#AcceptConditionAndTerms').attr('hidden', 'hidden');
                    }
                  
                }
            });
        });
   </script>
    @* <script type="text/javascript"     src="https://maps.google.com/maps/api/js?&libraries=places&key=AIzaSyBNLoYGrbnQI_GMqHt6m0PSN9yA7Zvq7gA"></script> *@
    <script type="text/javascript" src="https://maps.google.com/maps/api/js?&libraries=places&key=AIzaSyAB1ow9ErDvh6Wf6zODv7vMo7hoVA0ApX4"></script>

    <script>
        var map, infoWindow;
        var marker;
        var lat = document.getElementById("Input_Lat");
        var lng = document.getElementById("Input_Lng");
        var address = document.getElementById("Input_Location");
        var address2 = document.getElementById("address2");
        var geocoder = new google.maps.Geocoder();
        var infowindow = new google.maps.InfoWindow();

        setTimeout(function () {
            if (document.querySelector(".current-loc")) {


                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        (position) => {
                            const pos = {
                                lat: position.coords.latitude,
                                lng: position.coords.longitude,
                            };

                            infoWindow.setPosition(pos);
                            infoWindow.setContent("Location found.");
                            infoWindow.open(map);
                            map.setCenter(pos);
                            lat.value = pos.lat;
                            lng.value = pos.lng;
                            initMap();
                        },
                        () => {
                            handleLocationError(true, infoWindow, map.getCenter());
                        }
                    );
                } else {
                    // Browser doesn't support Geolocation
                    handleLocationError(false, infoWindow, map.getCenter());
                    console.log("sssssssssss")
                }

            }
        }, 500)

        function initMap() {
            var myLatlng = new google.maps.LatLng(lat.value, lng.value);
            var mapOptions = {
                zoom: 10,
                center: myLatlng,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
            };

            map = new google.maps.Map(document.getElementById("map"), mapOptions);
            marker = new google.maps.Marker({
                map: map,
                position: myLatlng,
                draggable: true,
            });

            // set current location
            infoWindow = new google.maps.InfoWindow();

            const locationButton = document.createElement("button");
            locationButton.setAttribute("type", "button");
            locationButton.classList.add("up", "default-font");

            locationButton.textContent = "موقعك الحالي";
            locationButton.classList.add("custom-map-control-button");
            map.controls[google.maps.ControlPosition.TOP_CENTER].push(
                locationButton
            );
            //test get current location onload

            locationButton.addEventListener("click", () => {
                // Try HTML5 geolocation.

                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        (position) => {
                            const pos = {
                                lat: position.coords.latitude,
                                lng: position.coords.longitude,
                            };

                            infoWindow.setPosition(pos);
                            infoWindow.setContent("Location found.");
                            infoWindow.open(map);
                            map.setCenter(pos);
                            lat.value = pos.lat;
                            lng.value = pos.lng;
                            initMap();
                        },
                        () => {
                            handleLocationError(true, infoWindow, map.getCenter());
                        }
                    );
                } else {
                    // Browser doesn't support Geolocation
                    handleLocationError(false, infoWindow, map.getCenter());
                }
            });

            function handleLocationError(browserHasGeolocation, infoWindow, pos) {
                infoWindow.setPosition(pos);
                infoWindow.setContent(
                    browserHasGeolocation
                        ? "Error: The Geolocation service failed."
                        : "Error: Your browser doesn't support geolocation."
                );
                infoWindow.open(map);
            }
            // end current location code
            geocoder.geocode({ latLng: myLatlng }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    if (results[0]) {
                        address.value = results[0].formatted_address;
                        lat.value = marker.getPosition().lat();
                        lng.value = marker.getPosition().lng();
                        infowindow.setContent(results[0].formatted_address);
                        infowindow.open(map, marker);
                    }
                }
            });

            google.maps.event.addListener(marker, "dragend", function () {
                geocoder.geocode(
                    { latLng: marker.getPosition() },
                    function (results, status) {
                        if (status == google.maps.GeocoderStatus.OK) {
                            if (results[0]) {
                                address.value = results[0].formatted_address;
                                lat.value = marker.getPosition().lat();
                                lng.value = marker.getPosition().lng();
                                infowindow.setContent(results[0].formatted_address);
                                infowindow.open(map, marker);
                            }
                        }
                    }
                );
            });
        }

        function initialize() {
            var input = document.getElementById("address2");
            var autocomplete = new google.maps.places.Autocomplete(
                                              /** @@type {HTMLInputElement} */(input),
                {
                    types: ["(cities)"],
                }
            );
            google.maps.event.addListener(
                autocomplete,
                "place_changed",
                function () {
                    var place = autocomplete.getPlace();
                    if (!place.geometry) {
                        return;
                    }
                    lat.value = place.geometry.location.lat();
                    lng.value = place.geometry.location.lng();
                    // initMap();
                    var address = "";
                    if (place.address_components) {
                        address = [
                            (place.address_components[0] &&
                                place.address_components[0].short_name) ||
                            "",
                            (place.address_components[1] &&
                                place.address_components[1].short_name) ||
                            "",
                            (place.address_components[2] &&
                                place.address_components[2].short_name) ||
                            "",
                        ].join(" ");
                    }
                    debugger
                    console.log(lat.value)
                    console.log(lng.value)
                    initMap();

                }
            );
        }

        google.maps.event.addDomListener(window, "load", initialize);

        google.maps.event.addDomListener(window, "load", initMap);
    </script>
    <script>
        $("#Input_CityId").change(function () {
            var CityId = $(this).val();
            var regionList = $('#Input_DistractId');
            $.ajax({
                url: `/Home/GetRegionsByCityId?cityId=${CityId}`,
                method: 'GET',
                success: function (regions) {
                    debugger
                    var rr=regions.length
                    if (regions.length == 0) {
                        regionList.empty();
                        regionList.append($('<option></option>').attr('value', 0).text("@localizer["Enter Distract"]"));
                    } else {
                        regionList.empty();
                        $.each(regions, function (i, region) {
                            regionList.append($('<option></option>').attr('value', region.id).text(region.name));
                            if (region.id == '@ViewData["SelectDistract"]') {
                                option.prop('selected', true);
                            }

                        });
                    }
                    
                }, error: function () { }
            })
        })
    </script>
    <script>
        $(document).ready(function () {
            var CityId = $("#Input_CityId").val();
            if (CityId != 0) {
                var regionList = $('#Input_DistractId');
                $.ajax({

                    url: `/Home/GetRegionsByCityId?cityId=${CityId}`,
                    method: 'GET',
                    success: function (regions) {
                        regionList.empty();
                        $.each(regions, function (i, region) {
                            console.log(region.name)
                            var option = $('<option></option>').attr('value', region.id).text(region.name);
                            regionList.append(option);
                            //regionList.append($('<option></option>').attr('value', region.value).text(region.text));
                            if (region.id == '@ViewData["SelectDistract"]') {
                                option.prop('selected', true);
                            }
                        });
                    }, error: function () { }
                })
            }
        });  //end Ready
    </script>

    <script>
        $(document).ready(function () {
            var phoneCodeText = $(".iti__selected-dial-code").text();
            $("#Input_PhoneCode").val(phoneCodeText)
        })
        $(document).on('click', '#iti-0__country-listbox', function () {
            var phoneCodeText = $(".iti__selected-dial-code").text();
            $("#Input_PhoneCode").val(phoneCodeText)
        });

    </script>
    <script>
        function RegisterNewUser(){
            debugger
            var iiii =$("#Input_DistractId").val();
            if (!$('#checkbox1').is(':checked')) {
                $('#AcceptConditionAndTerms').removeAttr('hidden');
                return 0;
            } else if ($("#Input_DistractId").val()=='0') {
                $("#Input_DistractId").val(null)
                $('#submitRegisterForm').click()
                
            }
            else{
                $('#submitRegisterForm').click()
            }
        }
       
    </script>


}


